contextClassSkel(packageName, grammarName, parserName, lexerName, className,ruleName)::=<<

package <packageName>;

import org.antlr.v4.runtime.ParserRuleContext;

import com.proteus.framework.app.*;
import com.proteus.<grammarName>.ANTLRv4.<parserName>;
import com.proteus.<grammarName>.ANTLRv4.<lexerName>;
import com.proteus.<grammarName>.ANTLRv4.<parserName>.*;

public class <className>Ext extends AbstractBaseExtendedContext{

	public <className>Ext(<className> ctx) {
		super("<grammarName>", new <parserName>(null), new <lexerName>(null),  ctx, new <parserName>ExtendedContextVisitor());
	}

	/*
	* Create a context for the given string  with extended context populated in that
	*/
	@Override
	public <className> getLatestContext(){
		return (<className>)super.getLatestContext();
	}

	/*
	* Create a context for the given string  with extended context populated in that
	*/
	@Override
	public <className> getContext(String str){
		return (<className>)new <parserName>PopulateExtendedContextVisitor().visit(((<parserName>)getParser(str)).<ruleName>());
	}
	
	@Override
	public void setContext(ParserRuleContext ctx){
		if(ctx != null){
			if(ctx instanceof <className>){
				addToContexts((<className>) ctx);
			} else {
				throw new ClassCastException(ctx.getClass().getSimpleName() + " cannot be cased to "+<className>.class.getName());
			}
		} else {
			addToContexts(null);
		}
	}
}
>>

contextAltParentClassSkel(packageName, grammarName, parserName, lexerName, className)::=<<
package <packageName>;

import com.proteus.framework.app.*;
import com.proteus.<grammarName>.ANTLRv4.<lexerName>;
import com.proteus.<grammarName>.ANTLRv4.<parserName>;
import com.proteus.<grammarName>.ANTLRv4.<parserName>.*;

public abstract class <className>Ext extends AbstractBaseExtendedContext{

	public <className>Ext(<className> ctx) {
		super("<grammarName>", new <parserName>(null), new <lexerName>(null), ctx, new <parserName>ExtendedContextVisitor());
	}

}
>>

contextAltClassSkel(packageName, grammarName, parserName, className, parentClassName, ruleName)::=<<

package <packageName>;

import org.antlr.v4.runtime.ParserRuleContext;
import com.proteus.<grammarName>.ANTLRv4.<parserName>;
import com.proteus.<grammarName>.ANTLRv4.<parserName>.*;


public class <className>Ext extends <parentClassName>Ext{

	public <className>Ext(<className> ctx) {
		super(ctx);
	}
	
	/*
	* Create a context for the given string  with extended context populated in that
	*/
	@Override
	public <className> getLatestContext(){
		return (<className>)super.getLatestContext();
	}
	
	/*
	* Create a context for the given string  with extended context populated in that
	*/
	@Override
	public <className> getContext(String str){
		return (<className>)new <parserName>PopulateExtendedContextVisitor().visit(((<parserName>)getParser(str)).<ruleName>());
	}
	
	@Override
	public void setContext(ParserRuleContext ctx){
		if(ctx != null){
			if(ctx instanceof <className>){
				addToContexts((<className>) ctx);
			} else {
				throw new ClassCastException(ctx.getClass().getSimpleName() + " cannot be cased to "+<className>.class.getName());
			}
		}
		else {
			addToContexts(null);
		}
	}
}
>>

extendedContextClassVisitorSkel(packageName, grammarName, parserName, methods)::=<<
package <packageName>;

import com.proteus.framework.app.*;
import com.proteus.framework.IExtendedContextVisitor;
import com.proteus.<grammarName>.ANTLRv4.<parserName>BaseVisitor;
import com.proteus.<grammarName>.ANTLRv4.<parserName>;
import com.proteus.<grammarName>.*;

public class <parserName>ExtendedContextVisitor extends <parserName>BaseVisitor\<AbstractBaseExtendedContext> implements IExtendedContextVisitor {
	<methods>
}
>>

extendedContextClassVisitorMethodSkel(ruleName, ruleContextName, parserName)::=<<

@Override 
public AbstractBaseExtendedContext visit<ruleName>(<parserName>.<ruleContextName> ctx) {
	return ((<ruleContextName>Ext)ctx.extendedContext).getLatestContext().extendedContext;
}

>>

populateExtendedContextClassVisitorSkel(packageName, grammarName, parserName, methods)::=<<
package <packageName>;

import org.antlr.v4.runtime.ParserRuleContext;
import com.proteus.<grammarName>.ANTLRv4.<parserName>BaseVisitor;
import com.proteus.<grammarName>.ANTLRv4.<parserName>;

public class <parserName>PopulateExtendedContextVisitor extends <parserName>BaseVisitor\<ParserRuleContext> {
	<methods>
}
>>

populateExtendedContextClassVisitorMethodSkel(ruleName, ruleContextName, parserName)::=<<

@Override 
public ParserRuleContext visit<ruleName>(<parserName>.<ruleContextName> ctx) {
	super.visit<ruleName>(ctx);
	ctx.extendedContext = new <ruleContextName>Ext(ctx);
	return ctx;
}

>>
